name: "Secure Timer"
author: "feltf"
category: crypto

description: |
  I asked ChatCheapLeakD to implement a deterministic ECDSA scheme following
  the specifications outlined in RFC 6979. As always, its implementation surpassed
  my expectations.

  After examining the intricate generated masterpiece, I made the decision to deploy
  an online timer that utilizes the generated ECDSA implementation to sign its responses.

  Feeling a bit too confident, I went ahead and added a flag command, which returns
  the flag if provided with a valid signature. I'm willing to bet you won't be able to
  obtain the flag... or perhaps you can?

value: 500
type: dynamic_docker
extra:
  initial: 500
  minimum: 100
  decay: 25
  redirect_type: direct
  compose_stack: !filecontents docker-compose.yml

flags:
  - CCSC{Make_sur3_that_you_never_ev3r_deviate_from_st4ndards}

hints:
  - |
   Have you tried to compare RFC6979 section [3.2](https://datatracker.ietf.org/doc/html/rfc6979#section-3.2),
   which describes the deterministic generation of `k`, with my AI's implementation? The AI malfunctioned and
   produced a slightly different implementation which may help you to recover the secret key `d`
   (denoted by `x` in the RFC). Instead of providing `d` to the HMAC, the flawed implementation XORs the
   first part and XNORs the second part of `d` with a known intermediate constant `k`.
  - |
   Did you know that `a XOR b = a + b - 2*(a&b)` ?

   First try to solve, locally, an easier version of the challenge.
   
   Replace the following lines in `server.py`

   ```python
   k_bytes = xor(tmp[: q_size // 2], x_octets[: q_size // 2])
   k_bytes += xnor(tmp[q_size // 2 :], x_octets[q_size // 2 :])
   ```

   with

   ```python
   k_bytes = xor(tmp, x_octets)
   ```

   Finally, try to extend your solution to solve the original challenge.

tags:
  - crypto
  - hard

files:
  - "public/server.py"

state: visible
version: "0.1"